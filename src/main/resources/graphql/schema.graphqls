schema {
    query: Query
}

type Query {
    # Fetch questions with an optional limit
    questions(limit: Int): [Question]!
    # Fetch questions based on the module/room
    module(module: Module!, limit: Int): [Question]!
    # Fetch questions based on the main topic
    mainTopics(mainTopic: MainTopicInput!, limit: Int): [Question]!
    # Fetch questions based on the subtopics
    subtopics(subtopics: [String]!, limit: Int): [Question]!
    # Fetch questions based on the keywords
    keywords(keywords: [String!]!, limit: Int): [Question]!
}

type Question {
    # Question id
    id: ID!
    # The question
    question: String!
    # The answer
    answer: String!
    # The module/room it belongs
    module: Module!
    # The main topic and subtopic of the question
    topic: MainTopic!
    # Keywords of the question
    keywords: [Keyword]!
    # Author of the answer
    author: Author!
}

type Author {
    id: ID!
    name: String!
}

type Keyword {
    id: ID!
    keyword: String!
}

type MainTopic {
    id: ID!
    name: String!
    subtopics: [Subtopic]!
}

type Subtopic {
    id: ID!
    name: String!
}

enum Module {
    PROGBASICS
    WEB
    ADVANCED
    OOP
}

input MainTopicInput {
    name: String!
}
